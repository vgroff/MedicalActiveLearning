
export class Image3D {
    
    constructor(dataX, pixHeight, pixWidth, pixDepth) {
	this.nImages = dataX.length
	this.height  = dataX[0].length
	this.width   = dataX[0][0].length
	this.imagesX = imgArray(nImages, height, width, pixHeight, pixWidth)
	this.imagesY = imgArray(height, nImages, width, pixDepth, pixWidth)
	this.imagesZ = imgArray(width, nImages, height, pixDepth, pixHeight)
	this.pixHeight = pixHeight
	this.pixWidth  = pixWidth
	this.pixDepth  = pixDepth
	for (var nImg = 0; nImg < nImages; nImg++) {
	    for (var y = 0; y < height; y++) {
		for (var x = 0; x < width; x++) {
		    setPixel(nImg, y, x, dataX[nImg][y][x])
		}
	    }
	}
    }

    imgArray(nImages, height, width, pixHeight, pixWidth) {
	var images = []
	for (var nImg = 0; nImg < nImages; nImg++) {
	    var data = []
	    for (var y = 0; y < height; y++) {
		images[nImg].push([])
		for (var x = 0; x < width; x++) {
		    images[nImg][y].push(0)
		}
	    }
	    images.push(new Image(data, pixHeight, pixWidth))
	}
	return images
    }

    setPixel(nImg, row, col, val) {
	this.imagesX[nImg][row][col] = val
	this.imagesY[col][(this.nImages-1) - nImg][row] = val
	this.imagesZ[row][(this.nImages-1) - nImg][col] = val
    }
    
}
