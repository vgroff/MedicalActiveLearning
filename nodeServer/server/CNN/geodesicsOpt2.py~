

def updateGeodesics(maxPathLength, stdDev, minEdge, minEdge2, img, probs, segmentation, weighting):
    # BFS with geodesic distances up to a certain distance
    qs = [queue.Queue(), queue.Queue()]
    nums = [0, 0]
    for i, row in enumerate(probs[0]):
        for j, col in enumerate(row):
            for k, val in enumerate(col):
                if (val < 0):
                    index = int(round(val))+2
                    qs[index].put([i,j,k])
                    nums[index] += 1
    directions = [ [1,0,0], [-1,0,0], [0,1,0], [0,-1,0], [0,0,1], [0,0,-1] ]
    c = 0
    for index in [0,1]:
        pathLengths = np.fill(img.shape, fill_value=-1.0)
        computedPathLengths = np.fill(img.shape, fill_value=-1.0)
        q = qs[index]
        while not q.empty():
            coords = q.get()

            row, col, depth = coords
            currPathLength = pathLengths[row, col, depth]
            # The if statement below is mean to skip over things in the queue that we have already computed
            if (computedPathLengths[row, col, depth] >= 0 and
                abs(currPathLength - computedPathLengths[row, col, depth]) < 0.0001):
                # If weve got a path length saved and it is the same as the current path length
                continue
            else:
                # Save path length
                if (currPathLength < 0):
                    currPathLength = 0
                computedPathLengths[row,col,depth] = currPathLength
            for direction in directions:
                # Go in every direction
                try:
                    newRow = row+direction[0]
                    newCol = col+direction[1]
                    newDepth = depth+direction[2]
                    if (newRow < 0 or newCol < 0 or newDepth < 0):
                        # Dont go to negative indices
                        continue
                    otherVal = segmentation[newRow, newCol, newDepth]
                    if (probs[0, newRow, newCol, newDepth] >= 0):# and index != otherVal:
                        # If this is a normal (non-scrible) and it has the opposite marking - does it need to have the opposite marking? Defeats the purpose maybe
                        i1 = img[row, col, depth]
                        i2 = img[newRow, newCol, newDepth]
                        l = minEdge
                        if (index == otherVal):
                            l = minEdge2
                        length = 1 - np.exp(-(i2 - i1)**2/(2*stdDev**2)) + minEdge
                        newPathLength = currPathLength + length
                        if (newPathLength > maxPathLength):
                            # If weve gone over the maximum path length, abandon
                            continue
                        destPathLength = pathLengths[newRow, newCol, newDepth]
                        if (newPathLength < destPathLength*0.8
                            or newPathLength < destPathLength - 0.05
                            or destPathLength < 0):
                            # If weve made a shorter path, save it and place in queue
                            q.put([newRow, newCol, newDepth])
                            pathLengths[newRow, newCol, newDepth] = newPathLength
                            if index != otherVal:
                                weighting[0, newRow, newCol, newDepth] = 0
                                weighting[1, newRow, newCol, newDepth] = 0
                except IndexError as e:
                    pass
                    #print(e)
                    #print("{},{},{} out of bounds for array shape {}".format(newRow,newCol,newDepth, pathLengths.shape))
