import numpy as np

def addToQueue(q, end, size, x, y, z):
    q[end, 0] = x
    q[end, 1] = y
    q[end, 2] = z
    return (end + 1) % size

def removeFromQueue(q, start, size):
    return q[start], (start + 1) % size

#pythran export updateGeodesicsOpt(float, float, float, float[][][], float[][][][], float[][][], float[][][][])
def updateGeodesicsOpt(maxPathLength, stdDev, minEdge, img, probs, segmentation, weighting):
    qStart = np.array([0,0])
    qEnd   = np.array([0,0])
    maxSize = img.shape[0]*img.shape[1]*img.shape[2]
    qs = np.zeros((2, maxSize, 3), dtype=np.float32)
    
    for i, row in enumerate(probs[0]):
        for j, col in enumerate(row):
            for k, val in enumerate(col):
                if (val < 0):
                    index = int(round(val))+2
                    qEnd[index] = addToQueue(qs[index], qEnd[index], maxSize, i, j, k)
