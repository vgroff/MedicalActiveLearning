import numpy as np
import tensorflow as tf
import os

from keras.optimizers import Adam, SGD

from dltk.core import metrics as metrics

from cnnUtils import loadModel
from imageUtils import getDatasetInfo
from imageReader import readFunc



def predict():
    model = loadModel(1)
    
    folder = "/home/vincent/Documents/imperial/individual project/datasets/decathlon/Task02_Heart"
    trainPaths = getDatasetInfo(folder)

    print("Getting images")
    size = [32, 80, 80]
    imgs = []
    labels = []
    for img in readFunc(trainPaths[19:], None,
                        {"folder":folder, "depth":132, "size":size, "whiten":True}):
        imgs.append(img["features"]["x"])
        labels.append(img["labels"]["y"])
    sgd = SGD(lr=0.0002, decay=1.2e-2, momentum=0.9, nesterov=True)
    #model.compile(optimizer = sgd, loss = 'binary_crossentropy', metrics = ['accuracy'])
    result = model.predict(np.array(imgs))#, np.array(labels))
    print(result[0,0,0,0])
    ones = 0
    zeroes = 0
    for i, img in enumerate(result):
        for row in img:
            for col in row:
                for depth in col:
                    if depth[0] > 0.5:
                        ones+=1
                    elif depth[0] < 0.5:
                        zeroes+=1
        #print(res)
        #print(np.sum(res))
        #print(np.sum(img))
        #dice = metrics.dice(img, labels, 1)[1:].mean()
        #print("Dice score: {}".format(dice))
    print(ones, zeroes)
        
if __name__ == '__main__':
    np.random.seed(42)
    tf.set_random_seed(42)
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
    tf.logging.set_verbosity(tf.logging.ERROR)
    os.environ["CUDA_VISIBLE_DEVICES"] = '0'
    predict()
